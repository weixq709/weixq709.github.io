import{_ as s,c as a,b as n,o as e}from"./app-BOzoy3rf.js";const t={};function l(h,i){return e(),a("div",null,[...i[0]||(i[0]=[n(`<p>在Go语言的Web开发生态中，<code>Gin</code>、<code>Echo</code>和<code>Beego</code>这三个框架因其各自的特色被广泛采用。它们分别代表了轻量高性能、均衡易用与全功能集成三种不同的设计取向，能够满足从微服务到企业级应用等多种开发需求。</p><h2 id="gin" tabindex="-1"><a class="header-anchor" href="#gin"><span>Gin</span></a></h2><p><a href="https://gin-gonic.com" target="_blank" rel="noopener noreferrer">Gin</a>是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确，具有快速灵活，容错方便等特点。 对于golang而言，web框架的依赖要远比Python，Java之类的要小。自身的net/http足够简单，性能也非常不错。</p><p>安装</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> github.com/gin-gonic/gin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> main</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">net/http</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">github.com/gin-gonic/gin</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 1.创建路由</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">   r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> gin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // 2.绑定路由规则，执行的函数</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // gin.Context，封装了request和response</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">   r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GET</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> func</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">gin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">http</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StatusOK</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello World!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   })</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // 3.监听端口，默认在8080</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // Run(&quot;里面不指定端口号默认为8080&quot;)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">   r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:8000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="beego" tabindex="-1"><a class="header-anchor" href="#beego"><span>Beego</span></a></h2><p><a href="https://github.com/beego/beego" target="_blank" rel="noopener noreferrer">Beego</a>是一个快速开发Go应用的http框架。Beego开源用来快速开发API、Web、后端服务等各种应用，是一个RESTFul的框架，主要设计灵感来源于tornado、sinatra、flask这三个框架。它结合了Go本身的一些特性（interface、struct继承等）而设计的一个框架。</p><h2 id="iris" tabindex="-1"><a class="header-anchor" href="#iris"><span>Iris</span></a></h2><p><a href="https://iris-go.com" target="_blank" rel="noopener noreferrer">Iris</a>框架旨在提供快速、简单且功能齐全的高效Web开发体验。它提供了精美易用的基础，适合构建网站或API。Iris是目前流行的Golang框架中唯一提供MVC高级架构支持的框架，并且支持依赖注入。</p>`,11)])])}const k=s(t,[["render",l]]),r=JSON.parse(`{"path":"/golang/web-framework/","title":"web框架介绍","lang":"zh-CN","frontmatter":{"title":"web框架介绍","createTime":"2025/10/16 21:54:02","permalink":"/golang/web-framework/","description":"在Go语言的Web开发生态中，Gin、Echo和Beego这三个框架因其各自的特色被广泛采用。它们分别代表了轻量高性能、均衡易用与全功能集成三种不同的设计取向，能够满足从微服务到企业级应用等多种开发需求。 Gin Gin是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确，具有快速灵活，容错方便等特点。 对于golang而言，web框...","head":[["meta",{"property":"og:url","content":"https://weixq709.github.io/golang/web-framework/"}],["meta",{"property":"og:site_name","content":"Joyce's Blog"}],["meta",{"property":"og:title","content":"web框架介绍"}],["meta",{"property":"og:description","content":"在Go语言的Web开发生态中，Gin、Echo和Beego这三个框架因其各自的特色被广泛采用。它们分别代表了轻量高性能、均衡易用与全功能集成三种不同的设计取向，能够满足从微服务到企业级应用等多种开发需求。 Gin Gin是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确，具有快速灵活，容错方便等特点。 对于golang而言，web框..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-16T14:13:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-16T14:13:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"web框架介绍\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-16T14:13:38.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":1.42,"words":427},"git":{"updatedTime":1760624018000,"contributors":[{"name":"weixiaoqiang","email":"weixiaoqiang8311@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/weixiaoqiang?v=4","url":"https://github.com/weixiaoqiang"}]},"autoDesc":true,"filePathRelative":"notes/go/web框架介绍.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"4ea6c6","sort":10001,"name":"go"}],"bulletin":false}`);export{k as comp,r as data};
